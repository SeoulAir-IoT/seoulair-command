using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using SeoulAir.Command.Domain.Dtos;
using SeoulAir.Command.Domain.Interfaces.Services;

namespace SeoulAir.Command.Api.Controllers
{
    /// <summary>
    /// Responsible for all CRUD operations on manual creation of Alerts.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class CommandController : ControllerBase
    {
        private readonly ICommandService _coursesService;

        public CommandController(ICommandService coursesService)
        {
            _coursesService = coursesService;
        }

        /// <summary>
        /// Read (CRUD) operation. Gets the Command from MongoDb Database. Matches the record by Id.  
        /// </summary>
        /// <param name="id">Unique string that represents the entity in database.</param>
        /// <response code="200">Operation completed successfully, requested resource found and returned</response>
        /// <response code="204">Operation completed successfully, requested resource does not exist</response>
        [ProducesResponseType(typeof(CommandDto), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [HttpGet("{id}")]
        public async Task<ActionResult<CommandDto>> FindAsync(string id)
        {
            var result = await _coursesService.FindAsync(id);

            if (result == default)
                return NoContent();

            return Ok(result);
        }
        
        /// <summary>
        /// Read (CRUD) operation. Gets the Command from MongoDb Database. Matches the record by Command Name.  
        /// </summary>
        /// <param name="name">Unique string that represents name of command.</param>
        /// <response code="200">Operation completed successfully, requested resource found and returned</response>
        /// <response code="204">Operation completed successfully, requested resource does not exist</response>
        [ProducesResponseType(typeof(CommandDto), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [HttpGet]
        public async Task<ActionResult<CommandDto>> FindByNameAsync([FromQuery] string name)
        {
            var result = await _coursesService.FindByNameAsync(name);

            if (result == default)
                return NoContent();

            return Ok(result);
        }

        /// <summary>
        /// Create (CRUD) operation. Creates the Command instance in Microsoft Sql Server Database.
        /// </summary>
        /// <param name="commandDto">Command to be created.</param>
        /// <remarks>
        /// Id should not be passed. If it is passed it is going to be ignored.
        /// Id is generated by the system
        /// </remarks>
        /// <response code="201">Operation completed successfully,
        /// data record has been created with returned id.</response>
        [ProducesResponseType(typeof(string), StatusCodes.Status201Created)]
        [HttpPost]
        public async Task<ActionResult<string>> Post(CommandDto commandDto)
        {
            var createdId = await _coursesService.AddAsync(commandDto);
            return CreatedAtAction(nameof(Post), createdId);
        }

        /// <summary>
        /// Deletes (CRUD) operation. Deletes Command from the database.
        /// </summary>
        /// <param name="id">Unique string that represents the entity to be deleted.</param>
        /// <response code="204">Operation completed successfully, Command has been deleted from database</response>
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [HttpDelete]
        public async Task<IActionResult> DeleteAsync(string id)
        {
            await _coursesService.DeleteAsync(id);
            
            return NoContent();
        }

        /// <summary>
        /// Reads multiple entries from database but in paginated form.
        /// </summary>
        /// <param name="paginator">Parameters for generating page.</param>
        /// <response code="200">Operation completed successfully, one page returned</response>
        [ProducesResponseType(typeof(PaginatedResultDto<CommandDto>),StatusCodes.Status200OK)]
        [HttpGet("page")]
        public async Task<ActionResult<PaginatedResultDto<CommandDto>>> GetPaginatedAsync(
            [FromQuery] Paginator paginator)
        {
            var result = await _coursesService.GetPaginated(paginator);
            
            return Ok(result);
        }

        /// <summary>
        /// Updates (CRUD) operation. Updates Alert from the database.
        /// </summary>
        /// <param name="id">Unique string that represents command in database.</param>
        /// <param name="dto">New state of Command that needs to be updated.</param>
        /// <response code="204">Operation completed successfully, Command has been updated</response>
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [HttpPut]
        public IActionResult Update(string id, CommandDto dto)
        {
            _coursesService.Update(id, dto);

            return NoContent();
        }
    }
}
